import socks
import argparse
import os
import re
import sys
import subprocess
import requests
from bs4 import BeautifulSoup

class Colors:

	@staticmethod
	def red_color(color):
		return "\033[1;31;10m" + color

	@staticmethod
	def bright_blue(color):
		return "\033[1;34;10m" + color

	@staticmethod
	def green_color(color):
		return "\033[1;32;10m" + color

	@staticmethod
	def white_color(color):
		return "\033[1;37;10m" + color

class Parser(Colors):
	def __init__(self):
		self.args = argparse.ArgumentParser(description="Write here")
		self.args.add_argument("--ip", help="Get your public IP", action='store_true')
		self.args.add_argument("--tor", help="Tor proxy. Select the browser to use.", type=self.check_browser)
		self.args.add_argument("--proxytor", help="socks4 or socks5 proxy for tor. ", type=self.check_socks)  # tor argument proxys
		
		# ---------------------------------------------------------------------------------------------------- #
		self.args.add_argument("--view", help="View the avlaliable proxies") # view proxies that are currently avalaible

		self.args_parsed = self.args.parse_args()

	def ip(self):
		return self.args_parsed.ip

	def tor(self):  # return the browser here
		return self.args_parsed.tor

	def proxytor(self):
		return self.args_parsed.proxytor

	def check_tor_running(self):
		check_tor = subprocess.check_output(["netstat", "-tupln"])
		check_tor = check_tor.decode()
		
		if not "9050" in check_tor:
			msg = "[-] Tor is not running. Please do (sudo service tor start) to run tor."
			print(Colors.red_color(msg))
			exit()

	def check_socks(self, socks):
		sockets = ["socks4", "socks5"]
		if not socks in sockets:
			msg = "[-] Invalid proxy."
			raise argparse.ArgumentError(msg)
		return socks

	def check_browser(self, browser):
		browser_lists = ["firefox"] # add more later
		if not browser in browser_lists:
			msg = "[-] Invalid browser."
			raise argparse.ArgumentError(msg)
		return browser

class PublicIp:

	@staticmethod
	def get_public_ip():
		try:
			f = open("text.txt", "w")
			call_ip = subprocess.call(["nslookup", "myip.opendns.com", "resolver1.opendns.com"], stdout=f)
			f.close()
		except PermissionError:
			print(Colors.red_color("[-] Permission denied. Try using sudo."))
			exit()

		with open("text.txt", "r") as file:
			data = file.read()
			file.close()
			os.remove("text.txt")

		get_ip = re.findall("Address:.*", data)
		get_ip = get_ip.pop(1).replace("Address: ", "")

		return get_ip

class TorProxy(Parser):
	def __init__(self):
		super().__init__()

		self.browser = Parser.tor(self)  # the browser the user wants to open up with tor
		self.proxy_chain = Parser.proxytor(self)  # socks4 or socks5

	def set_proxy_chain(self):  # for the --proxy command
		loopback_address = "127.0.0.1"
		tor_port = "9050"
		proxy_type = self.proxy_chain
		err_msg = f"[-] {proxy_type} is already a proxy."
		proxy_chain_config = "/etc/proxychains.conf"

		with open(proxy_chain_config, "r") as f:
			data = f.read()
			data = data.split()

		if self.proxy_chain in data[280:]:
			print(Colors.red_color(err_msg))
			exit()
		else:
			try:
				with open(proxy_chain_config, "a") as f:
					f.write("{}\t{} {}\n".format(proxy_type, loopback_address, tor_port))
					print(Colors.bright_blue("\n[+] Successfully wrote to file."))
			except Exception as e:
				print(e)
				print(Colors.red_color("[-] Was not able to write to file."))
 	
	def start_tor(self):
		user_browser = self.browser
		print(Colors.bright_blue("\n[+] Starting tor."))
		subprocess.call(["proxychains", f"{user_browser}"])

class ViewProxies:

	@staticmethod
	def scrape_website():
		source = requests.get("https://www.socks-proxy.net/").text
		soup = BeautifulSoup(source, 'lxml')
		table_contents = soup.find('table', id="proxylisttable")
		rows = table_contents.find_all("td")

		ip = 16
		port = 17
		country = 19
		version = 20

		for letters in rows:
			try:
				my_dict = {
					"IP": rows[ip].text,
					"PORT": rows[port].text,
					"COUNTRY": rows[country].text,
					"VERSION": rows[version].text
				}
				ip += 8
				port += 8
				country += 8
				version += 8
				yield my_dict
			except IndexError:
				pass

	@staticmethod
	def avalaible_proxies():
		grab_scrape_sites = ViewProxies.scrape_website()

		print(Colors.red_color("IP ------------------- PORT ------------ COUNTRY --------- VERSION"))
		print("\n")
		for letters in grab_scrape_sites:
			get_letters = ViewProxies.proxy_table(letters["IP"], letters["PORT"], letters["COUNTRY"], letters["VERSION"])
			print(get_letters)
	
	@staticmethod
	def proxy_table(first, second, third, fourth):
		ip = Colors.white_color(first)
		port = Colors.bright_blue(second)
		country = Colors.green_color(third)
		version = Colors.white_color(fourth)

		return ip + "\t\t" + port + "\t\t" + country + "\t\t" + version
			

if __name__ == '__main__':
	try:
		argument = sys.argv[1:]
		if "--ip" in argument:
			print(PublicIp.get_public_ip())
		elif "--proxytor" in argument:
			TorProxy().set_proxy_chain()
		elif "--tor" in argument:
			Parser().check_tor_running()
			TorProxy().start_tor()
		elif "--view" in argument:
			ViewProxies.avalaible_proxies()
		else:
			print(Colors.red_color("[-] Invalid argument."))
	except IndexError:
		pass
	except KeyboardInterrupt:
		print("[-] Exiting")
		exit()
